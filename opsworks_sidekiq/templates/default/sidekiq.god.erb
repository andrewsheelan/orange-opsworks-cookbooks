RAILS_ENV   = '<%= @deploy[:rails_env] %>'
RAILS_ROOT  = '<%= @deploy[:current_path] %>'
PID_DIR     = '<%= @deploy[:current_path] %>/tmp/pids'
#pid_file = File.join(deploy[:deploy_to], 'shared', 'pids', 'sidekiq.pid')

God.watch do |w|
  w.name     = "sidekiq"
  w.group     = "workers"
  w.interval = 30.seconds
  w.env      = { "RAILS_ENV" => RAILS_ENV }
  w.dir      = "#{RAILS_ROOT}"

  w.env      = {
    "PATH"        => "/usr/local/bin:#{ENV['PATH']}"
  }

  w.start    = "cd #{RAILS_ROOT}; bundle exec sidekiq -C config/sidekiq.yml -e #{RAILS_ENV} -P #{PID_DIR}/sidekiq.pid"
  w.stop     = "cd #{RAILS_ROOT}; bundle exec sidekiqctl stop #{PID_DIR}/sidekiq.pid"
  w.log      = "#{RAILS_ROOT}/log/sidekiq.log"
  w.uid      = '<%= @deploy[:user] %>'
  w.gid      = '<%= @deploy[:group] %>'

  w.start_grace = 10.seconds
  w.pid_file = "#{PID_DIR}/sidekiq.pid"

  # clean pid files before start if necessary
  w.behavior(:clean_pid_file)

  # determine the state on startup
  w.transition(:init, { true => :up, false => :start }) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end
  end

  # determine when process has finished starting
  w.transition([:start, :restart], :up) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end

    # failsafe
    on.condition(:tries) do |c|
      c.times = 5
      c.transition = :start
      c.interval = 5.seconds
    end
  end

  # start if process is not running
  w.transition(:up, :start) do |on|
    on.condition(:process_exits)
  end

  # lifecycle
  w.lifecycle do |on|
    on.condition(:flapping) do |c|
      c.to_state = [:start, :restart]
      c.times = 5
      c.within = 5.minute
      c.transition = :unmonitored
      c.retry_in = 10.minutes
      c.retry_times = 5
      c.retry_within = 2.hours
    end
  end

end
