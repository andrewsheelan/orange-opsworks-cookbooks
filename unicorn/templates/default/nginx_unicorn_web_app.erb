upstream unicorn_<%= @application[:domains].first %> {
 server unix:<%= @application[:deploy_to]%>/shared/sockets/unicorn.sock fail_timeout=0;
}

server {
  listen 80;
  server_name <%= @application[:domains].join(" ") %> <%= node[:hostname] %>;
  access_log <%= node[:nginx][:log_dir] %>/<%= @application[:domains].first %>.access.log main;

  keepalive_timeout 5;

  root <%= @application[:absolute_document_root] %>public/;

  <% if @application[:nginx] && @application[:nginx][:client_max_body_size] %>
    client_max_body_size <%= @application[:nginx][:client_max_body_size] %>;
  <% end %>

  location /my-meals/prep-details {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

    <% if @application[:enable_mod_security] and not node[:hostname].match /jobs/ %>
      ModSecurityEnabled on;
      ModSecurityConfig /etc/nginx/modsecurity.conf;
      proxy_read_timeout 180s;
    <% end %>

    # If you don't find the filename in the static files
    # Then request it from the unicorn server
    if (!-f $request_filename) {
      proxy_pass http://unicorn_<%= @application[:domains].first %>;
      break;
    }
  }
  
  location / {
	<% if @application[:redirect_to_ssl] == "true" %>
      <% if @application[:redirect_to_host] %>
		return       301 https://<%= @application[:redirect_to_host]%>$request_uri;
      <% else %>
        return       301 https://$host$request_uri;
      <% end %>
	<% end %>
  }

  location /nginx_status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    deny all;
  }

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root <%= @application[:absolute_document_root]%>public/;
  }
}

<% if @application[:ssl_support] %>
server {
  listen   443;
  server_name <%= @application[:domains].join(" ") %> <%= node[:hostname] %>;
  access_log <%= node[:nginx][:log_dir] %>/<%= @application[:domains].first %>-ssl.access.log main;
  
  ssl on;
  ssl_certificate /etc/nginx/ssl/<%= @application[:cert_name].first %>;
  ssl_certificate_key /etc/nginx/ssl/<%= @application[:key_name].first %>;
  <% if @application[:ssl_certificate_ca] -%>
  ssl_client_certificate /etc/nginx/ssl/<%= @application[:domains].first %>.ca;
  <% end -%>

  keepalive_timeout 5;

  root <%= @application[:absolute_document_root] %>public/;

  <% if @application[:nginx] && @application[:nginx][:client_max_body_size] %>
    client_max_body_size <%= @application[:nginx][:client_max_body_size] %>;
  <% end %>
  
  location /my-meals/prep-details {
	return       301 http://<%= @application[:redirect_to_host]%>$request_uri;
  }

  location / {
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

    # <%= node[:hostname] %>
    # <%= node[:hostname].match /jobs/ %>
    <% if @application[:enable_mod_security] and not node[:hostname].match /jobs/ %>
      ModSecurityEnabled on;
      ModSecurityConfig /etc/nginx/modsecurity.conf;
      proxy_read_timeout 180s;
    <% end %>

    # If you don't find the filename in the static files
    # Then request it from the unicorn server
    if (!-f $request_filename) {
      proxy_pass http://unicorn_<%= @application[:domains].first %>;
      break;
    }
  }

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root <%= @application[:absolute_document_root]%>public/;
  }
}
<% end %>
